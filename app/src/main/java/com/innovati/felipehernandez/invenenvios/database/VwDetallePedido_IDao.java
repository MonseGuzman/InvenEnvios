package com.innovati.felipehernandez.invenenvios.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VW_DETALLE_PEDIDO__I".
*/
public class VwDetallePedido_IDao extends AbstractDao<VwDetallePedido_I, Long> {

    public static final String TABLENAME = "VW_DETALLE_PEDIDO__I";

    /**
     * Properties of entity VwDetallePedido_I.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property IdDetallePedido = new Property(1, String.class, "idDetallePedido", false, "ID_DETALLE_PEDIDO");
        public final static Property IdPedido = new Property(2, String.class, "idPedido", false, "ID_PEDIDO");
        public final static Property ClaveArticulo = new Property(3, String.class, "claveArticulo", false, "CLAVE_ARTICULO");
        public final static Property Nombre = new Property(4, String.class, "nombre", false, "NOMBRE");
        public final static Property Cantidad = new Property(5, float.class, "cantidad", false, "CANTIDAD");
        public final static Property Precio = new Property(6, float.class, "precio", false, "PRECIO");
        public final static Property Subtotal = new Property(7, float.class, "subtotal", false, "SUBTOTAL");
        public final static Property Iva = new Property(8, float.class, "iva", false, "IVA");
        public final static Property Total = new Property(9, float.class, "total", false, "TOTAL");
        public final static Property Servidor = new Property(10, boolean.class, "servidor", false, "SERVIDOR");
        public final static Property Surtido = new Property(11, short.class, "surtido", false, "SURTIDO");
        public final static Property FechaActualizacion = new Property(12, java.util.Date.class, "fechaActualizacion", false, "FECHA_ACTUALIZACION");
        public final static Property UsuarioActualizacion = new Property(13, String.class, "usuarioActualizacion", false, "USUARIO_ACTUALIZACION");
    }


    public VwDetallePedido_IDao(DaoConfig config) {
        super(config);
    }
    
    public VwDetallePedido_IDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VW_DETALLE_PEDIDO__I\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"ID_DETALLE_PEDIDO\" TEXT," + // 1: idDetallePedido
                "\"ID_PEDIDO\" TEXT," + // 2: idPedido
                "\"CLAVE_ARTICULO\" TEXT," + // 3: claveArticulo
                "\"NOMBRE\" TEXT," + // 4: nombre
                "\"CANTIDAD\" REAL NOT NULL ," + // 5: cantidad
                "\"PRECIO\" REAL NOT NULL ," + // 6: precio
                "\"SUBTOTAL\" REAL NOT NULL ," + // 7: subtotal
                "\"IVA\" REAL NOT NULL ," + // 8: iva
                "\"TOTAL\" REAL NOT NULL ," + // 9: total
                "\"SERVIDOR\" INTEGER NOT NULL ," + // 10: servidor
                "\"SURTIDO\" INTEGER NOT NULL ," + // 11: surtido
                "\"FECHA_ACTUALIZACION\" INTEGER," + // 12: fechaActualizacion
                "\"USUARIO_ACTUALIZACION\" TEXT);"); // 13: usuarioActualizacion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VW_DETALLE_PEDIDO__I\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VwDetallePedido_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String idDetallePedido = entity.getIdDetallePedido();
        if (idDetallePedido != null) {
            stmt.bindString(2, idDetallePedido);
        }
 
        String idPedido = entity.getIdPedido();
        if (idPedido != null) {
            stmt.bindString(3, idPedido);
        }
 
        String claveArticulo = entity.getClaveArticulo();
        if (claveArticulo != null) {
            stmt.bindString(4, claveArticulo);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(5, nombre);
        }
        stmt.bindDouble(6, entity.getCantidad());
        stmt.bindDouble(7, entity.getPrecio());
        stmt.bindDouble(8, entity.getSubtotal());
        stmt.bindDouble(9, entity.getIva());
        stmt.bindDouble(10, entity.getTotal());
        stmt.bindLong(11, entity.getServidor() ? 1L: 0L);
        stmt.bindLong(12, entity.getSurtido());
 
        java.util.Date fechaActualizacion = entity.getFechaActualizacion();
        if (fechaActualizacion != null) {
            stmt.bindLong(13, fechaActualizacion.getTime());
        }
 
        String usuarioActualizacion = entity.getUsuarioActualizacion();
        if (usuarioActualizacion != null) {
            stmt.bindString(14, usuarioActualizacion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VwDetallePedido_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String idDetallePedido = entity.getIdDetallePedido();
        if (idDetallePedido != null) {
            stmt.bindString(2, idDetallePedido);
        }
 
        String idPedido = entity.getIdPedido();
        if (idPedido != null) {
            stmt.bindString(3, idPedido);
        }
 
        String claveArticulo = entity.getClaveArticulo();
        if (claveArticulo != null) {
            stmt.bindString(4, claveArticulo);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(5, nombre);
        }
        stmt.bindDouble(6, entity.getCantidad());
        stmt.bindDouble(7, entity.getPrecio());
        stmt.bindDouble(8, entity.getSubtotal());
        stmt.bindDouble(9, entity.getIva());
        stmt.bindDouble(10, entity.getTotal());
        stmt.bindLong(11, entity.getServidor() ? 1L: 0L);
        stmt.bindLong(12, entity.getSurtido());
 
        java.util.Date fechaActualizacion = entity.getFechaActualizacion();
        if (fechaActualizacion != null) {
            stmt.bindLong(13, fechaActualizacion.getTime());
        }
 
        String usuarioActualizacion = entity.getUsuarioActualizacion();
        if (usuarioActualizacion != null) {
            stmt.bindString(14, usuarioActualizacion);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VwDetallePedido_I readEntity(Cursor cursor, int offset) {
        VwDetallePedido_I entity = new VwDetallePedido_I( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idDetallePedido
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idPedido
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // claveArticulo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nombre
            cursor.getFloat(offset + 5), // cantidad
            cursor.getFloat(offset + 6), // precio
            cursor.getFloat(offset + 7), // subtotal
            cursor.getFloat(offset + 8), // iva
            cursor.getFloat(offset + 9), // total
            cursor.getShort(offset + 10) != 0, // servidor
            cursor.getShort(offset + 11), // surtido
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // fechaActualizacion
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // usuarioActualizacion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VwDetallePedido_I entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdDetallePedido(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdPedido(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClaveArticulo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNombre(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCantidad(cursor.getFloat(offset + 5));
        entity.setPrecio(cursor.getFloat(offset + 6));
        entity.setSubtotal(cursor.getFloat(offset + 7));
        entity.setIva(cursor.getFloat(offset + 8));
        entity.setTotal(cursor.getFloat(offset + 9));
        entity.setServidor(cursor.getShort(offset + 10) != 0);
        entity.setSurtido(cursor.getShort(offset + 11));
        entity.setFechaActualizacion(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setUsuarioActualizacion(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VwDetallePedido_I entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VwDetallePedido_I entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VwDetallePedido_I entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
