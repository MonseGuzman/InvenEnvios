/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.innovati.felipehernandez.invenenvios.clases.jdbc;

import com.innovati.felipehernandez.invenenvios.clases.dao.*;
import com.innovati.felipehernandez.invenenvios.clases.factory.*;
import com.innovati.felipehernandez.invenenvios.clases.dto.*;
import com.innovati.felipehernandez.invenenvios.clases.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class VwClientesDaoImpl extends AbstractDAO implements VwClientesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT Clave, Nombre, RFC, Calle, NumeroExterior, NumeroInterior, Colonia, Telefono FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column Clave
	 */
	protected static final int COLUMN_CLAVE = 1;

	/** 
	 * Index of column Nombre
	 */
	protected static final int COLUMN_NOMBRE = 2;

	/** 
	 * Index of column RFC
	 */
	protected static final int COLUMN_RFC = 3;

	/** 
	 * Index of column Calle
	 */
	protected static final int COLUMN_CALLE = 4;

	/** 
	 * Index of column NumeroExterior
	 */
	protected static final int COLUMN_NUMERO_EXTERIOR = 5;

	/** 
	 * Index of column NumeroInterior
	 */
	protected static final int COLUMN_NUMERO_INTERIOR = 6;

	/** 
	 * Index of column Colonia
	 */
	protected static final int COLUMN_COLONIA = 7;

	/** 
	 * Index of column Telefono
	 */
	protected static final int COLUMN_TELEFONO = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Returns all rows from the vwClientes table that match the criteria ''.
	 */
	public VwClientes[] findAll() throws VwClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the vwClientes table that match the criteria 'Clave = :clave'.
	 */
	public VwClientes[] findWhereClaveEquals(String clave) throws VwClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Clave = ? ORDER BY Clave", new Object[] { clave } );
	}

	/** 
	 * Returns all rows from the vwClientes table that match the criteria 'Nombre = :nombre'.
	 */
	public VwClientes[] findWhereNombreEquals(String nombre) throws VwClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Nombre LIKE %?% ORDER BY Nombre", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the vwClientes table that match the criteria 'RFC = :rfc'.
	 */
	public VwClientes[] findWhereRfcEquals(String rfc) throws VwClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC = ? ORDER BY RFC", new Object[] { rfc } );
	}

	/** 
	 * Returns all rows from the vwClientes table that match the criteria 'Calle = :calle'.
	 */
	public VwClientes[] findWhereCalleEquals(String calle) throws VwClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Calle = ? ORDER BY Calle", new Object[] { calle } );
	}

	/** 
	 * Returns all rows from the vwClientes table that match the criteria 'NumeroExterior = :numeroExterior'.
	 */
	public VwClientes[] findWhereNumeroExteriorEquals(String numeroExterior) throws VwClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NumeroExterior = ? ORDER BY NumeroExterior", new Object[] { numeroExterior } );
	}

	/** 
	 * Returns all rows from the vwClientes table that match the criteria 'NumeroInterior = :numeroInterior'.
	 */
	public VwClientes[] findWhereNumeroInteriorEquals(String numeroInterior) throws VwClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NumeroInterior = ? ORDER BY NumeroInterior", new Object[] { numeroInterior } );
	}

	/** 
	 * Returns all rows from the vwClientes table that match the criteria 'Colonia = :colonia'.
	 */
	public VwClientes[] findWhereColoniaEquals(String colonia) throws VwClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Colonia = ? ORDER BY Colonia", new Object[] { colonia } );
	}

	/** 
	 * Returns all rows from the vwClientes table that match the criteria 'Telefono = :telefono'.
	 */
	public VwClientes[] findWhereTelefonoEquals(String telefono) throws VwClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Telefono = ? ORDER BY Telefono", new Object[] { telefono } );
	}

	/**
	 * Method 'VwClientesDaoImpl'
	 * 
	 */
	public VwClientesDaoImpl()
	{
	}

	/**
	 * Method 'VwClientesDaoImpl'
	 * 
	 * @param userConn
	 */
	public VwClientesDaoImpl(final Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "Inven_E..vwClientes";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected VwClientes fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			VwClientes dto = new VwClientes();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected VwClientes[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			VwClientes dto = new VwClientes();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		VwClientes ret[] = new VwClientes[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(VwClientes dto, ResultSet rs) throws SQLException
	{
		dto.setClave( rs.getString( COLUMN_CLAVE ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setRfc( rs.getString( COLUMN_RFC ) );
		dto.setCalle( rs.getString( COLUMN_CALLE ) );
		dto.setNumeroExterior( rs.getString( COLUMN_NUMERO_EXTERIOR ) );
		dto.setNumeroInterior( rs.getString( COLUMN_NUMERO_INTERIOR ) );
		dto.setColonia( rs.getString( COLUMN_COLONIA ) );
		dto.setTelefono( rs.getString( COLUMN_TELEFONO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(VwClientes dto)
	{
	}

	/** 
	 * Returns all rows from the vwClientes table that match the specified arbitrary SQL statement
	 */
	public VwClientes[] findByDynamicSelect(String sql, Object[] sqlParams) throws VwClientesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VwClientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the vwClientes table that match the specified arbitrary SQL statement
	 */
	public VwClientes[] findByDynamicWhere(String sql, Object[] sqlParams) throws VwClientesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VwClientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
