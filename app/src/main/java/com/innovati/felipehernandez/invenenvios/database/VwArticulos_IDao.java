package com.innovati.felipehernandez.invenenvios.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VW_ARTICULOS__I".
*/
public class VwArticulos_IDao extends AbstractDao<VwArticulos_I, Long> {

    public static final String TABLENAME = "VW_ARTICULOS__I";

    /**
     * Properties of entity VwArticulos_I.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Clave = new Property(1, String.class, "clave", false, "CLAVE");
        public final static Property Nombre = new Property(2, String.class, "nombre", false, "NOMBRE");
        public final static Property UnidadPrimaria = new Property(3, String.class, "unidadPrimaria", false, "UNIDAD_PRIMARIA");
        public final static Property Precio1 = new Property(4, float.class, "precio1", false, "PRECIO1");
        public final static Property Activo = new Property(5, String.class, "activo", false, "ACTIVO");
        public final static Property TiempoSurtido = new Property(6, String.class, "tiempoSurtido", false, "TIEMPO_SURTIDO");
        public final static Property ExistenciaTotal = new Property(7, float.class, "existenciaTotal", false, "EXISTENCIA_TOTAL");
        public final static Property Cubicaje = new Property(8, String.class, "cubicaje", false, "CUBICAJE");
    }


    public VwArticulos_IDao(DaoConfig config) {
        super(config);
    }
    
    public VwArticulos_IDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VW_ARTICULOS__I\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"CLAVE\" TEXT," + // 1: clave
                "\"NOMBRE\" TEXT," + // 2: nombre
                "\"UNIDAD_PRIMARIA\" TEXT," + // 3: unidadPrimaria
                "\"PRECIO1\" REAL NOT NULL ," + // 4: precio1
                "\"ACTIVO\" TEXT," + // 5: activo
                "\"TIEMPO_SURTIDO\" TEXT," + // 6: tiempoSurtido
                "\"EXISTENCIA_TOTAL\" REAL NOT NULL ," + // 7: existenciaTotal
                "\"CUBICAJE\" TEXT);"); // 8: cubicaje
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VW_ARTICULOS__I\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VwArticulos_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String clave = entity.getClave();
        if (clave != null) {
            stmt.bindString(2, clave);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
 
        String unidadPrimaria = entity.getUnidadPrimaria();
        if (unidadPrimaria != null) {
            stmt.bindString(4, unidadPrimaria);
        }
        stmt.bindDouble(5, entity.getPrecio1());
 
        String activo = entity.getActivo();
        if (activo != null) {
            stmt.bindString(6, activo);
        }
 
        String tiempoSurtido = entity.getTiempoSurtido();
        if (tiempoSurtido != null) {
            stmt.bindString(7, tiempoSurtido);
        }
        stmt.bindDouble(8, entity.getExistenciaTotal());
 
        String cubicaje = entity.getCubicaje();
        if (cubicaje != null) {
            stmt.bindString(9, cubicaje);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VwArticulos_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String clave = entity.getClave();
        if (clave != null) {
            stmt.bindString(2, clave);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
 
        String unidadPrimaria = entity.getUnidadPrimaria();
        if (unidadPrimaria != null) {
            stmt.bindString(4, unidadPrimaria);
        }
        stmt.bindDouble(5, entity.getPrecio1());
 
        String activo = entity.getActivo();
        if (activo != null) {
            stmt.bindString(6, activo);
        }
 
        String tiempoSurtido = entity.getTiempoSurtido();
        if (tiempoSurtido != null) {
            stmt.bindString(7, tiempoSurtido);
        }
        stmt.bindDouble(8, entity.getExistenciaTotal());
 
        String cubicaje = entity.getCubicaje();
        if (cubicaje != null) {
            stmt.bindString(9, cubicaje);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VwArticulos_I readEntity(Cursor cursor, int offset) {
        VwArticulos_I entity = new VwArticulos_I( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // clave
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombre
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // unidadPrimaria
            cursor.getFloat(offset + 4), // precio1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // activo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tiempoSurtido
            cursor.getFloat(offset + 7), // existenciaTotal
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // cubicaje
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VwArticulos_I entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClave(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnidadPrimaria(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrecio1(cursor.getFloat(offset + 4));
        entity.setActivo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTiempoSurtido(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExistenciaTotal(cursor.getFloat(offset + 7));
        entity.setCubicaje(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VwArticulos_I entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VwArticulos_I entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VwArticulos_I entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
