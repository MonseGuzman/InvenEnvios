package com.innovati.felipehernandez.invenenvios.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PEDIDOS".
*/
public class PedidosDao_I extends AbstractDao<Pedidos_I, Long> {

    public static final String TABLENAME = "PEDIDOS";

    /**
     * Properties of entity Pedidos_I.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property IdPedido = new Property(1, String.class, "idPedido", false, "ID_PEDIDO");
        public final static Property IdUsuario = new Property(2, String.class, "idUsuario", false, "ID_USUARIO");
        public final static Property Folio = new Property(3, String.class, "folio", false, "FOLIO");
        public final static Property ClaveCliente = new Property(4, String.class, "claveCliente", false, "CLAVE_CLIENTE");
        public final static Property Fecha = new Property(5, java.util.Date.class, "fecha", false, "FECHA");
        public final static Property Estatus = new Property(6, short.class, "estatus", false, "ESTATUS");
        public final static Property Subtotal = new Property(7, float.class, "subtotal", false, "SUBTOTAL");
        public final static Property Iva = new Property(8, float.class, "iva", false, "IVA");
        public final static Property Total = new Property(9, float.class, "total", false, "TOTAL");
        public final static Property Observaciones = new Property(10, String.class, "observaciones", false, "OBSERVACIONES");
        public final static Property UltimaFechaActualizacion = new Property(11, java.util.Date.class, "ultimaFechaActualizacion", false, "ULTIMA_FECHA_ACTUALIZACION");
        public final static Property UltimoUsuarioActualizacion = new Property(12, String.class, "ultimoUsuarioActualizacion", false, "ULTIMO_USUARIO_ACTUALIZACION");
    }


    public PedidosDao_I(DaoConfig config) {
        super(config);
    }
    
    public PedidosDao_I(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PEDIDOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"ID_PEDIDO\" TEXT," + // 1: idPedido
                "\"ID_USUARIO\" TEXT," + // 2: idUsuario
                "\"FOLIO\" TEXT," + // 3: folio
                "\"CLAVE_CLIENTE\" TEXT," + // 4: claveCliente
                "\"FECHA\" INTEGER," + // 5: fecha
                "\"ESTATUS\" INTEGER NOT NULL ," + // 6: estatus
                "\"SUBTOTAL\" REAL NOT NULL ," + // 7: subtotal
                "\"IVA\" REAL NOT NULL ," + // 8: iva
                "\"TOTAL\" REAL NOT NULL ," + // 9: total
                "\"OBSERVACIONES\" TEXT," + // 10: observaciones
                "\"ULTIMA_FECHA_ACTUALIZACION\" INTEGER," + // 11: ultimaFechaActualizacion
                "\"ULTIMO_USUARIO_ACTUALIZACION\" TEXT);"); // 12: ultimoUsuarioActualizacion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PEDIDOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Pedidos_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String idPedido = entity.getIdPedido();
        if (idPedido != null) {
            stmt.bindString(2, idPedido);
        }
 
        String idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindString(3, idUsuario);
        }
 
        String folio = entity.getFolio();
        if (folio != null) {
            stmt.bindString(4, folio);
        }
 
        String claveCliente = entity.getClaveCliente();
        if (claveCliente != null) {
            stmt.bindString(5, claveCliente);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(6, fecha.getTime());
        }
        stmt.bindLong(7, entity.getEstatus());
        stmt.bindDouble(8, entity.getSubtotal());
        stmt.bindDouble(9, entity.getIva());
        stmt.bindDouble(10, entity.getTotal());
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(11, observaciones);
        }
 
        java.util.Date ultimaFechaActualizacion = entity.getUltimaFechaActualizacion();
        if (ultimaFechaActualizacion != null) {
            stmt.bindLong(12, ultimaFechaActualizacion.getTime());
        }
 
        String ultimoUsuarioActualizacion = entity.getUltimoUsuarioActualizacion();
        if (ultimoUsuarioActualizacion != null) {
            stmt.bindString(13, ultimoUsuarioActualizacion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Pedidos_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String idPedido = entity.getIdPedido();
        if (idPedido != null) {
            stmt.bindString(2, idPedido);
        }
 
        String idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindString(3, idUsuario);
        }
 
        String folio = entity.getFolio();
        if (folio != null) {
            stmt.bindString(4, folio);
        }
 
        String claveCliente = entity.getClaveCliente();
        if (claveCliente != null) {
            stmt.bindString(5, claveCliente);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(6, fecha.getTime());
        }
        stmt.bindLong(7, entity.getEstatus());
        stmt.bindDouble(8, entity.getSubtotal());
        stmt.bindDouble(9, entity.getIva());
        stmt.bindDouble(10, entity.getTotal());
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(11, observaciones);
        }
 
        java.util.Date ultimaFechaActualizacion = entity.getUltimaFechaActualizacion();
        if (ultimaFechaActualizacion != null) {
            stmt.bindLong(12, ultimaFechaActualizacion.getTime());
        }
 
        String ultimoUsuarioActualizacion = entity.getUltimoUsuarioActualizacion();
        if (ultimoUsuarioActualizacion != null) {
            stmt.bindString(13, ultimoUsuarioActualizacion);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Pedidos_I readEntity(Cursor cursor, int offset) {
        Pedidos_I entity = new Pedidos_I( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idPedido
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idUsuario
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // folio
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // claveCliente
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // fecha
            cursor.getShort(offset + 6), // estatus
            cursor.getFloat(offset + 7), // subtotal
            cursor.getFloat(offset + 8), // iva
            cursor.getFloat(offset + 9), // total
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // observaciones
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // ultimaFechaActualizacion
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // ultimoUsuarioActualizacion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Pedidos_I entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPedido(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdUsuario(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFolio(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClaveCliente(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFecha(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setEstatus(cursor.getShort(offset + 6));
        entity.setSubtotal(cursor.getFloat(offset + 7));
        entity.setIva(cursor.getFloat(offset + 8));
        entity.setTotal(cursor.getFloat(offset + 9));
        entity.setObservaciones(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUltimaFechaActualizacion(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setUltimoUsuarioActualizacion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Pedidos_I entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Pedidos_I entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Pedidos_I entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
