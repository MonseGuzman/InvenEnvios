/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.innovati.felipehernandez.invenenvios.clases.dao;

import com.innovati.felipehernandez.invenenvios.clases.dto.*;
import com.innovati.felipehernandez.invenenvios.clases.exceptions.*;
import java.sql.CallableStatement;

public interface VwAbastecimientoDao
{
	/** 
	 * Returns all rows from the vwAbastecimiento table that match the criteria ''.
	 */
	public VwAbastecimiento[] findAll() throws VwAbastecimientoDaoException;

	/** 
	 * Returns all rows from the vwAbastecimiento table that match the criteria 'Nombre = :nombre'.
	 */
	public VwAbastecimiento[] findWhereNombreEquals(String nombre) throws VwAbastecimientoDaoException;

	/** 
	 * Returns all rows from the vwAbastecimiento table that match the criteria 'Total = :total'.
	 */
	public VwAbastecimiento[] findWhereTotalEquals(double total) throws VwAbastecimientoDaoException;

	/** 
	 * Returns all rows from the vwAbastecimiento table that match the criteria 'UnidadPrimaria = :unidadPrimaria'.
	 */
	public VwAbastecimiento[] findWhereUnidadPrimariaEquals(String unidadPrimaria) throws VwAbastecimientoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the vwAbastecimiento table that match the specified arbitrary SQL statement
	 */
	public VwAbastecimiento[] findByDynamicSelect(String sql, Object[] sqlParams) throws VwAbastecimientoDaoException;

	/** 
	 * Returns all rows from the vwAbastecimiento table that match the specified arbitrary SQL statement
	 */
	public VwAbastecimiento[] findByDynamicWhere(String sql, Object[] sqlParams) throws VwAbastecimientoDaoException;

}
