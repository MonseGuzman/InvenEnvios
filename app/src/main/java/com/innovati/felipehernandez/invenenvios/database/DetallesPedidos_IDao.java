package com.innovati.felipehernandez.invenenvios.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETALLES_PEDIDOS__I".
*/
public class DetallesPedidos_IDao extends AbstractDao<DetallesPedidos_I, Long> {

    public static final String TABLENAME = "DETALLES_PEDIDOS__I";

    /**
     * Properties of entity DetallesPedidos_I.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property IdDetallePedido = new Property(1, String.class, "idDetallePedido", false, "ID_DETALLE_PEDIDO");
        public final static Property IdPedido = new Property(2, String.class, "idPedido", false, "ID_PEDIDO");
        public final static Property ClaveArticulo = new Property(3, String.class, "claveArticulo", false, "CLAVE_ARTICULO");
        public final static Property Cantidad = new Property(4, float.class, "cantidad", false, "CANTIDAD");
        public final static Property Precio = new Property(5, float.class, "precio", false, "PRECIO");
        public final static Property Subtotal = new Property(6, float.class, "subtotal", false, "SUBTOTAL");
        public final static Property Iva = new Property(7, float.class, "iva", false, "IVA");
        public final static Property Total = new Property(8, float.class, "total", false, "TOTAL");
        public final static Property UltimaFechaActualizacion = new Property(9, java.util.Date.class, "ultimaFechaActualizacion", false, "ULTIMA_FECHA_ACTUALIZACION");
        public final static Property UltimoUsuarioActualizacion = new Property(10, String.class, "ultimoUsuarioActualizacion", false, "ULTIMO_USUARIO_ACTUALIZACION");
    }


    public DetallesPedidos_IDao(DaoConfig config) {
        super(config);
    }
    
    public DetallesPedidos_IDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETALLES_PEDIDOS__I\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"ID_DETALLE_PEDIDO\" TEXT," + // 1: idDetallePedido
                "\"ID_PEDIDO\" TEXT," + // 2: idPedido
                "\"CLAVE_ARTICULO\" TEXT," + // 3: claveArticulo
                "\"CANTIDAD\" REAL NOT NULL ," + // 4: cantidad
                "\"PRECIO\" REAL NOT NULL ," + // 5: precio
                "\"SUBTOTAL\" REAL NOT NULL ," + // 6: subtotal
                "\"IVA\" REAL NOT NULL ," + // 7: iva
                "\"TOTAL\" REAL NOT NULL ," + // 8: total
                "\"ULTIMA_FECHA_ACTUALIZACION\" INTEGER," + // 9: ultimaFechaActualizacion
                "\"ULTIMO_USUARIO_ACTUALIZACION\" TEXT);"); // 10: ultimoUsuarioActualizacion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETALLES_PEDIDOS__I\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetallesPedidos_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String idDetallePedido = entity.getIdDetallePedido();
        if (idDetallePedido != null) {
            stmt.bindString(2, idDetallePedido);
        }
 
        String idPedido = entity.getIdPedido();
        if (idPedido != null) {
            stmt.bindString(3, idPedido);
        }
 
        String claveArticulo = entity.getClaveArticulo();
        if (claveArticulo != null) {
            stmt.bindString(4, claveArticulo);
        }
        stmt.bindDouble(5, entity.getCantidad());
        stmt.bindDouble(6, entity.getPrecio());
        stmt.bindDouble(7, entity.getSubtotal());
        stmt.bindDouble(8, entity.getIva());
        stmt.bindDouble(9, entity.getTotal());
 
        java.util.Date ultimaFechaActualizacion = entity.getUltimaFechaActualizacion();
        if (ultimaFechaActualizacion != null) {
            stmt.bindLong(10, ultimaFechaActualizacion.getTime());
        }
 
        String ultimoUsuarioActualizacion = entity.getUltimoUsuarioActualizacion();
        if (ultimoUsuarioActualizacion != null) {
            stmt.bindString(11, ultimoUsuarioActualizacion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetallesPedidos_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String idDetallePedido = entity.getIdDetallePedido();
        if (idDetallePedido != null) {
            stmt.bindString(2, idDetallePedido);
        }
 
        String idPedido = entity.getIdPedido();
        if (idPedido != null) {
            stmt.bindString(3, idPedido);
        }
 
        String claveArticulo = entity.getClaveArticulo();
        if (claveArticulo != null) {
            stmt.bindString(4, claveArticulo);
        }
        stmt.bindDouble(5, entity.getCantidad());
        stmt.bindDouble(6, entity.getPrecio());
        stmt.bindDouble(7, entity.getSubtotal());
        stmt.bindDouble(8, entity.getIva());
        stmt.bindDouble(9, entity.getTotal());
 
        java.util.Date ultimaFechaActualizacion = entity.getUltimaFechaActualizacion();
        if (ultimaFechaActualizacion != null) {
            stmt.bindLong(10, ultimaFechaActualizacion.getTime());
        }
 
        String ultimoUsuarioActualizacion = entity.getUltimoUsuarioActualizacion();
        if (ultimoUsuarioActualizacion != null) {
            stmt.bindString(11, ultimoUsuarioActualizacion);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DetallesPedidos_I readEntity(Cursor cursor, int offset) {
        DetallesPedidos_I entity = new DetallesPedidos_I( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idDetallePedido
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idPedido
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // claveArticulo
            cursor.getFloat(offset + 4), // cantidad
            cursor.getFloat(offset + 5), // precio
            cursor.getFloat(offset + 6), // subtotal
            cursor.getFloat(offset + 7), // iva
            cursor.getFloat(offset + 8), // total
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // ultimaFechaActualizacion
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // ultimoUsuarioActualizacion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetallesPedidos_I entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdDetallePedido(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdPedido(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClaveArticulo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCantidad(cursor.getFloat(offset + 4));
        entity.setPrecio(cursor.getFloat(offset + 5));
        entity.setSubtotal(cursor.getFloat(offset + 6));
        entity.setIva(cursor.getFloat(offset + 7));
        entity.setTotal(cursor.getFloat(offset + 8));
        entity.setUltimaFechaActualizacion(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUltimoUsuarioActualizacion(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetallesPedidos_I entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetallesPedidos_I entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DetallesPedidos_I entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
