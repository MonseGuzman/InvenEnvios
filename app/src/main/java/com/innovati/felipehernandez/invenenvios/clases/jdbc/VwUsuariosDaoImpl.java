/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.innovati.felipehernandez.invenenvios.clases.jdbc;

import com.innovati.felipehernandez.invenenvios.dao.*;
import com.innovati.felipehernandez.invenenvios.factory.*;
import java.util.Date;
import com.innovati.felipehernandez.invenenvios.dto.*;
import com.innovati.felipehernandez.invenenvios.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class VwUsuariosDaoImpl extends AbstractDAO implements VwUsuariosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IdUsuario, Clave, NickName, Password, Status, FechaActualizacion, IdUsuarioActualizacion, Sucursal FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column IdUsuario
	 */
	protected static final int COLUMN_ID_USUARIO = 1;

	/** 
	 * Index of column Clave
	 */
	protected static final int COLUMN_CLAVE = 2;

	/** 
	 * Index of column NickName
	 */
	protected static final int COLUMN_NICK_NAME = 3;

	/** 
	 * Index of column Password
	 */
	protected static final int COLUMN_PASSWORD = 4;

	/** 
	 * Index of column Status
	 */
	protected static final int COLUMN_STATUS = 5;

	/** 
	 * Index of column FechaActualizacion
	 */
	protected static final int COLUMN_FECHA_ACTUALIZACION = 6;

	/** 
	 * Index of column IdUsuarioActualizacion
	 */
	protected static final int COLUMN_ID_USUARIO_ACTUALIZACION = 7;

	/** 
	 * Index of column Sucursal
	 */
	protected static final int COLUMN_SUCURSAL = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Returns all rows from the vwUsuarios table that match the criteria ''.
	 */
	public VwUsuarios[] findAll() throws VwUsuariosDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the criteria 'IdUsuario = :idUsuario'.
	 */
	public VwUsuarios[] findWhereIdUsuarioEquals(String idUsuario) throws VwUsuariosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IdUsuario = ? ORDER BY IdUsuario", new Object[] { idUsuario } );
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the criteria 'Clave = :clave'.
	 */
	public VwUsuarios[] findWhereClaveEquals(String clave) throws VwUsuariosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Clave = ? ORDER BY Clave", new Object[] { clave } );
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the criteria 'NickName = :nickName'.
	 */
	public VwUsuarios[] findWhereNickNameEquals(String nickName) throws VwUsuariosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NickName = ? ORDER BY NickName", new Object[] { nickName } );
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the criteria 'Password = :password'.
	 */
	public VwUsuarios[] findWherePasswordEquals(String password) throws VwUsuariosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Password = ? ORDER BY Password", new Object[] { password } );
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the criteria 'Status = :status'.
	 */
	public VwUsuarios[] findWhereStatusEquals(short status) throws VwUsuariosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Status = ? ORDER BY Status", new Object[] {  new Short(status) } );
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the criteria 'FechaActualizacion = :fechaActualizacion'.
	 */
	public VwUsuarios[] findWhereFechaActualizacionEquals(Date fechaActualizacion) throws VwUsuariosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FechaActualizacion = ? ORDER BY FechaActualizacion", new Object[] { fechaActualizacion==null ? null : new java.sql.Timestamp( fechaActualizacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the criteria 'IdUsuarioActualizacion = :idUsuarioActualizacion'.
	 */
	public VwUsuarios[] findWhereIdUsuarioActualizacionEquals(String idUsuarioActualizacion) throws VwUsuariosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IdUsuarioActualizacion = ? ORDER BY IdUsuarioActualizacion", new Object[] { idUsuarioActualizacion } );
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the criteria 'Sucursal = :sucursal'.
	 */
	public VwUsuarios[] findWhereSucursalEquals(String sucursal) throws VwUsuariosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Sucursal = ? ORDER BY Sucursal", new Object[] { sucursal } );
	}

	/**
	 * Method 'VwUsuariosDaoImpl'
	 * 
	 */
	public VwUsuariosDaoImpl()
	{
	}

	/**
	 * Method 'VwUsuariosDaoImpl'
	 * 
	 * @param userConn
	 */
	public VwUsuariosDaoImpl(final Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "Inven_E..vwUsuarios";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected VwUsuarios fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			VwUsuarios dto = new VwUsuarios();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected VwUsuarios[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			VwUsuarios dto = new VwUsuarios();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		VwUsuarios ret[] = new VwUsuarios[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(VwUsuarios dto, ResultSet rs) throws SQLException
	{
		dto.setIdUsuario( rs.getString( COLUMN_ID_USUARIO ) );
		dto.setClave( rs.getString( COLUMN_CLAVE ) );
		dto.setNickName( rs.getString( COLUMN_NICK_NAME ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setStatus( rs.getShort( COLUMN_STATUS ) );
		dto.setFechaActualizacion( rs.getTimestamp(COLUMN_FECHA_ACTUALIZACION ) );
		dto.setIdUsuarioActualizacion( rs.getString( COLUMN_ID_USUARIO_ACTUALIZACION ) );
		dto.setSucursal( rs.getString( COLUMN_SUCURSAL ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(VwUsuarios dto)
	{
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the specified arbitrary SQL statement
	 */
	public VwUsuarios[] findByDynamicSelect(String sql, Object[] sqlParams) throws VwUsuariosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VwUsuariosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the vwUsuarios table that match the specified arbitrary SQL statement
	 */
	public VwUsuarios[] findByDynamicWhere(String sql, Object[] sqlParams) throws VwUsuariosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VwUsuariosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
