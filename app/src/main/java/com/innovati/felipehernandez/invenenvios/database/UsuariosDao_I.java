package com.innovati.felipehernandez.invenenvios.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USUARIOS".
*/
public class UsuariosDao_I extends AbstractDao<Usuarios_I, Long> {

    public static final String TABLENAME = "USUARIOS";

    /**
     * Properties of entity Usuarios_I.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property IdUsuario = new Property(1, String.class, "idUsuario", false, "ID_USUARIO");
        public final static Property Clave = new Property(2, int.class, "clave", false, "CLAVE");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Estatus = new Property(5, short.class, "estatus", false, "ESTATUS");
        public final static Property UltimaFechaActualizacion = new Property(6, java.util.Date.class, "ultimaFechaActualizacion", false, "ULTIMA_FECHA_ACTUALIZACION");
        public final static Property UltimoUsuarioActualizacion = new Property(7, String.class, "ultimoUsuarioActualizacion", false, "ULTIMO_USUARIO_ACTUALIZACION");
    }


    public UsuariosDao_I(DaoConfig config) {
        super(config);
    }
    
    public UsuariosDao_I(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USUARIOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"ID_USUARIO\" TEXT," + // 1: idUsuario
                "\"CLAVE\" INTEGER NOT NULL ," + // 2: clave
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"PASSWORD\" TEXT," + // 4: password
                "\"ESTATUS\" INTEGER NOT NULL ," + // 5: estatus
                "\"ULTIMA_FECHA_ACTUALIZACION\" INTEGER," + // 6: ultimaFechaActualizacion
                "\"ULTIMO_USUARIO_ACTUALIZACION\" TEXT);"); // 7: ultimoUsuarioActualizacion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USUARIOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Usuarios_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindString(2, idUsuario);
        }
        stmt.bindLong(3, entity.getClave());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
        stmt.bindLong(6, entity.getEstatus());
 
        java.util.Date ultimaFechaActualizacion = entity.getUltimaFechaActualizacion();
        if (ultimaFechaActualizacion != null) {
            stmt.bindLong(7, ultimaFechaActualizacion.getTime());
        }
 
        String ultimoUsuarioActualizacion = entity.getUltimoUsuarioActualizacion();
        if (ultimoUsuarioActualizacion != null) {
            stmt.bindString(8, ultimoUsuarioActualizacion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Usuarios_I entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindString(2, idUsuario);
        }
        stmt.bindLong(3, entity.getClave());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
        stmt.bindLong(6, entity.getEstatus());
 
        java.util.Date ultimaFechaActualizacion = entity.getUltimaFechaActualizacion();
        if (ultimaFechaActualizacion != null) {
            stmt.bindLong(7, ultimaFechaActualizacion.getTime());
        }
 
        String ultimoUsuarioActualizacion = entity.getUltimoUsuarioActualizacion();
        if (ultimoUsuarioActualizacion != null) {
            stmt.bindString(8, ultimoUsuarioActualizacion);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Usuarios_I readEntity(Cursor cursor, int offset) {
        Usuarios_I entity = new Usuarios_I( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idUsuario
            cursor.getInt(offset + 2), // clave
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.getShort(offset + 5), // estatus
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // ultimaFechaActualizacion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // ultimoUsuarioActualizacion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Usuarios_I entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdUsuario(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClave(cursor.getInt(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEstatus(cursor.getShort(offset + 5));
        entity.setUltimaFechaActualizacion(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUltimoUsuarioActualizacion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Usuarios_I entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Usuarios_I entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Usuarios_I entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
