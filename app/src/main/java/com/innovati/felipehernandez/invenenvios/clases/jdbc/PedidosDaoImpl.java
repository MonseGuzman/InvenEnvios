/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.innovati.felipehernandez.invenenvios.clases.jdbc;

import com.innovati.felipehernandez.invenenvios.clases.dao.*;
import com.innovati.felipehernandez.invenenvios.clases.factory.*;
import java.util.Date;
import com.innovati.felipehernandez.invenenvios.clases.dto.*;
import com.innovati.felipehernandez.invenenvios.clases.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;
import java.sql.CallableStatement;

public class PedidosDaoImpl extends AbstractDAO implements PedidosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IdPedido, IdUsuario, Folio, ClaveCliente, Fecha, Estatus, Subtotal, IVA, Total, Observaciones, UltimaFechaActualizacion, UltimoUsuarioActualizacion FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IdPedido, IdUsuario, ClaveCliente, Fecha, Estatus, Subtotal, IVA, Total, Observaciones, UltimaFechaActualizacion, UltimoUsuarioActualizacion ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? );SELECT @@IDENTITY";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IdPedido = ?, IdUsuario = ?, ClaveCliente = ?, Fecha = ?, Estatus = ?, Subtotal = ?, IVA = ?, Total = ?, Observaciones = ?, UltimaFechaActualizacion = ?, UltimoUsuarioActualizacion = ? WHERE IdPedido = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IdPedido = ?";

	/** 
	 * Index of column IdPedido
	 */
	protected static final int COLUMN_ID_PEDIDO = 1;

	/** 
	 * Index of column IdUsuario
	 */
	protected static final int COLUMN_ID_USUARIO = 2;

	/** 
	 * Index of column Folio
	 */
	protected static final int COLUMN_FOLIO = 3;

	/** 
	 * Index of column ClaveCliente
	 */
	protected static final int COLUMN_CLAVE_CLIENTE = 4;

	/** 
	 * Index of column Fecha
	 */
	protected static final int COLUMN_FECHA = 5;

	/** 
	 * Index of column Estatus
	 */
	protected static final int COLUMN_ESTATUS = 6;

	/** 
	 * Index of column Subtotal
	 */
	protected static final int COLUMN_SUBTOTAL = 7;

	/** 
	 * Index of column IVA
	 */
	protected static final int COLUMN_IVA = 8;

	/** 
	 * Index of column Total
	 */
	protected static final int COLUMN_TOTAL = 9;

	/** 
	 * Index of column Observaciones
	 */
	protected static final int COLUMN_OBSERVACIONES = 10;

	/** 
	 * Index of column UltimaFechaActualizacion
	 */
	protected static final int COLUMN_ULTIMA_FECHA_ACTUALIZACION = 11;

	/** 
	 * Index of column UltimoUsuarioActualizacion
	 */
	protected static final int COLUMN_ULTIMO_USUARIO_ACTUALIZACION = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column IdPedido
	 */
	protected static final int PK_COLUMN_ID_PEDIDO = 1;

	/** 
	 * Inserts a new row in the Pedidos table.
	 */
	public PedidosPk insert(Pedidos dto) throws PedidosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			stmt.setString( COLUMN_ID_PEDIDO, dto.getIdPedido() );
			stmt.setString( COLUMN_ID_USUARIO, dto.getIdUsuario() );
			// no bind statement for auto increment column 'Folio
			stmt.setString( COLUMN_CLAVE_CLIENTE - 1, dto.getClaveCliente() );
			stmt.setTimestamp(COLUMN_FECHA - 1, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			if (dto.isEstatusNull()) {
				stmt.setNull( COLUMN_ESTATUS - 1, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( COLUMN_ESTATUS - 1, dto.getEstatus() );
			}
		
			if (dto.isSubtotalNull()) {
				stmt.setNull( COLUMN_SUBTOTAL - 1, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( COLUMN_SUBTOTAL - 1, dto.getSubtotal() );
			}
		
			if (dto.isIvaNull()) {
				stmt.setNull( COLUMN_IVA - 1, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( COLUMN_IVA - 1, dto.getIva() );
			}
		
			if (dto.isTotalNull()) {
				stmt.setNull( COLUMN_TOTAL - 1, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( COLUMN_TOTAL - 1, dto.getTotal() );
			}
		
			stmt.setString( COLUMN_OBSERVACIONES - 1, dto.getObservaciones() );
			stmt.setTimestamp(COLUMN_ULTIMA_FECHA_ACTUALIZACION - 1, dto.getUltimaFechaActualizacion()==null ? null : new java.sql.Timestamp( dto.getUltimaFechaActualizacion().getTime() ) );
			stmt.setString( COLUMN_ULTIMO_USUARIO_ACTUALIZACION - 1, dto.getUltimoUsuarioActualizacion() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			stmt.execute();
			int rows = stmt.getUpdateCount();
			System.out.println( rows + " rows affected" );
		
			// retrieve values from IDENTITY columns
			boolean moreResults = true;
			while (moreResults || rows != -1) {
				try {
					rs = stmt.getResultSet();
				}
				catch (IllegalArgumentException e) {
					e.printStackTrace();
				}
		
				if (rs != null) {
					rs.next();
					dto.setFolio( rs.getInt( 1 ) );
				}
		
				moreResults = stmt.getMoreResults();
				rows = stmt.getUpdateCount();
			}
		
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PedidosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the Pedidos table.
	 */
	public void update(PedidosPk pk, Pedidos dto) throws PedidosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getIdPedido() );
			stmt.setString( index++, dto.getIdUsuario() );
			stmt.setString( index++, dto.getClaveCliente() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			if (dto.isEstatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getEstatus() );
			}
		
			if (dto.isSubtotalNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getSubtotal() );
			}
		
			if (dto.isIvaNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getIva() );
			}
		
			if (dto.isTotalNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getTotal() );
			}
		
			stmt.setString( index++, dto.getObservaciones() );
			stmt.setTimestamp(index++, dto.getUltimaFechaActualizacion()==null ? null : new java.sql.Timestamp( dto.getUltimaFechaActualizacion().getTime() ) );
			stmt.setString( index++, dto.getUltimoUsuarioActualizacion() );
			stmt.setString( 12, pk.getIdPedido() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PedidosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the Pedidos table.
	 */
	public void delete(PedidosPk pk) throws PedidosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getIdPedido() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PedidosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the Pedidos table that matches the specified primary-key value.
	 */
	public Pedidos findByPrimaryKey(PedidosPk pk) throws PedidosDaoException
	{
		return findByPrimaryKey( pk.getIdPedido() );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'IdPedido = :idPedido'.
	 */
	public Pedidos findByPrimaryKey(String idPedido) throws PedidosDaoException
	{
		Pedidos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IdPedido = ?", new Object[] { idPedido } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria ''.
	 */
	public Pedidos[] findAll() throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IdPedido", null );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'IdPedido = :idPedido'.
	 */
	public Pedidos[] findWhereIdPedidoEquals(String idPedido) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IdPedido = ? ORDER BY IdPedido", new Object[] { idPedido } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'IdUsuario = :idUsuario'.
	 */
	public Pedidos[] findWhereIdUsuarioEquals(String idUsuario) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IdUsuario = ? ORDER BY IdUsuario", new Object[] { idUsuario } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'Folio = :folio'.
	 */
	public Pedidos[] findWhereFolioEquals(int folio) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Folio = ? ORDER BY Folio", new Object[] {  new Integer(folio) } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'ClaveCliente = :claveCliente'.
	 */
	public Pedidos[] findWhereClaveClienteEquals(String claveCliente) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ClaveCliente = ? ORDER BY ClaveCliente", new Object[] { claveCliente } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'Fecha = :fecha'.
	 */
	public Pedidos[] findWhereFechaEquals(Date fecha) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Fecha = ? ORDER BY Fecha", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'Estatus = :estatus'.
	 */
	public Pedidos[] findWhereEstatusEquals(short estatus) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Estatus = ? ORDER BY Estatus", new Object[] {  new Short(estatus) } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'Subtotal = :subtotal'.
	 */
	public Pedidos[] findWhereSubtotalEquals(float subtotal) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Subtotal = ? ORDER BY Subtotal", new Object[] {  new Float(subtotal) } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'IVA = :iva'.
	 */
	public Pedidos[] findWhereIvaEquals(float iva) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IVA = ? ORDER BY IVA", new Object[] {  new Float(iva) } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'Total = :total'.
	 */
	public Pedidos[] findWhereTotalEquals(float total) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Total = ? ORDER BY Total", new Object[] {  new Float(total) } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'Observaciones = :observaciones'.
	 */
	public Pedidos[] findWhereObservacionesEquals(String observaciones) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Observaciones = ? ORDER BY Observaciones", new Object[] { observaciones } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'UltimaFechaActualizacion = :ultimaFechaActualizacion'.
	 */
	public Pedidos[] findWhereUltimaFechaActualizacionEquals(Date ultimaFechaActualizacion) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UltimaFechaActualizacion = ? ORDER BY UltimaFechaActualizacion", new Object[] { ultimaFechaActualizacion==null ? null : new java.sql.Timestamp( ultimaFechaActualizacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the Pedidos table that match the criteria 'UltimoUsuarioActualizacion = :ultimoUsuarioActualizacion'.
	 */
	public Pedidos[] findWhereUltimoUsuarioActualizacionEquals(String ultimoUsuarioActualizacion) throws PedidosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UltimoUsuarioActualizacion = ? ORDER BY UltimoUsuarioActualizacion", new Object[] { ultimoUsuarioActualizacion } );
	}

	/**
	 * Method 'PedidosDaoImpl'
	 * 
	 */
	public PedidosDaoImpl()
	{
	}

	/**
	 * Method 'PedidosDaoImpl'
	 * 
	 * @param userConn
	 */
	public PedidosDaoImpl(final Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "Inven_E..Pedidos";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Pedidos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Pedidos dto = new Pedidos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Pedidos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Pedidos dto = new Pedidos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Pedidos ret[] = new Pedidos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Pedidos dto, ResultSet rs) throws SQLException
	{
		dto.setIdPedido( rs.getString( COLUMN_ID_PEDIDO ) );
		dto.setIdUsuario( rs.getString( COLUMN_ID_USUARIO ) );
		dto.setFolio( rs.getInt( COLUMN_FOLIO ) );
		dto.setClaveCliente( rs.getString( COLUMN_CLAVE_CLIENTE ) );
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setEstatus( rs.getShort( COLUMN_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setEstatusNull( true );
		}
		
		dto.setSubtotal( rs.getFloat( COLUMN_SUBTOTAL ) );
		if (rs.wasNull()) {
			dto.setSubtotalNull( true );
		}
		
		dto.setIva( rs.getFloat( COLUMN_IVA ) );
		if (rs.wasNull()) {
			dto.setIvaNull( true );
		}
		
		dto.setTotal( rs.getFloat( COLUMN_TOTAL ) );
		if (rs.wasNull()) {
			dto.setTotalNull( true );
		}
		
		dto.setObservaciones( rs.getString( COLUMN_OBSERVACIONES ) );
		dto.setUltimaFechaActualizacion( rs.getTimestamp(COLUMN_ULTIMA_FECHA_ACTUALIZACION ) );
		dto.setUltimoUsuarioActualizacion( rs.getString( COLUMN_ULTIMO_USUARIO_ACTUALIZACION ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Pedidos dto)
	{
	}

	/** 
	 * Returns all rows from the Pedidos table that match the specified arbitrary SQL statement
	 */
	public Pedidos[] findByDynamicSelect(String sql, Object[] sqlParams) throws PedidosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PedidosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the Pedidos table that match the specified arbitrary SQL statement
	 */
	public Pedidos[] findByDynamicWhere(String sql, Object[] sqlParams) throws PedidosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PedidosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
