/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.innovati.felipehernandez.invenenvios.clases.jdbc;

import com.innovati.felipehernandez.invenenvios.clases.dao.*;
import com.innovati.felipehernandez.invenenvios.clases.factory.*;
import com.innovati.felipehernandez.invenenvios.clases.dto.*;
import com.innovati.felipehernandez.invenenvios.clases.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;
import java.sql.CallableStatement;

public class VwArticulosDaoImpl extends AbstractDAO implements VwArticulosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
   protected Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
   protected final String SQL_SELECT = "SELECT Clave, Nombre, UnidadPrimaria, Precio2, Precio3, Precio4, Precio5, TipoImpuesto, Grupo, Tipo, Status, Ubicacion, Moneda, TiempoSurtido, Pedido, CostoPromedio, UltimoCosto, CostoReposicion, ExistenciaTotal, Activo, Precio1, Clase, Cubicaje, Peso, Equivalencia FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
   protected int maxRows;

	/** 
	 * Index of column Clave
	 */
   protected static final int COLUMN_CLAVE = 1;

	/** 
	 * Index of column Nombre
	 */
   protected static final int COLUMN_NOMBRE = 2;

	/** 
	 * Index of column UnidadPrimaria
	 */
   protected static final int COLUMN_UNIDAD_PRIMARIA = 3;

	/** 
	 * Index of column Precio2
	 */
   protected static final int COLUMN_PRECIO2 = 4;

	/** 
	 * Index of column Precio3
	 */
   protected static final int COLUMN_PRECIO3 = 5;

	/** 
	 * Index of column Precio4
	 */
   protected static final int COLUMN_PRECIO4 = 6;

	/** 
	 * Index of column Precio5
	 */
   protected static final int COLUMN_PRECIO5 = 7;

	/** 
	 * Index of column TipoImpuesto
	 */
   protected static final int COLUMN_TIPO_IMPUESTO = 8;

	/** 
	 * Index of column Grupo
	 */
   protected static final int COLUMN_GRUPO = 9;

	/** 
	 * Index of column Tipo
	 */
   protected static final int COLUMN_TIPO = 10;

	/** 
	 * Index of column Status
	 */
   protected static final int COLUMN_STATUS = 11;

	/** 
	 * Index of column Ubicacion
	 */
   protected static final int COLUMN_UBICACION = 12;

	/** 
	 * Index of column Moneda
	 */
   protected static final int COLUMN_MONEDA = 13;

	/** 
	 * Index of column TiempoSurtido
	 */
   protected static final int COLUMN_TIEMPO_SURTIDO = 14;

	/** 
	 * Index of column Pedido
	 */
   protected static final int COLUMN_PEDIDO = 15;

	/** 
	 * Index of column CostoPromedio
	 */
   protected static final int COLUMN_COSTO_PROMEDIO = 16;

	/** 
	 * Index of column UltimoCosto
	 */
   protected static final int COLUMN_ULTIMO_COSTO = 17;

	/** 
	 * Index of column CostoReposicion
	 */
   protected static final int COLUMN_COSTO_REPOSICION = 18;

	/** 
	 * Index of column ExistenciaTotal
	 */
   protected static final int COLUMN_EXISTENCIA_TOTAL = 19;

	/** 
	 * Index of column Activo
	 */
   protected static final int COLUMN_ACTIVO = 20;

	/** 
	 * Index of column Precio1
	 */
   protected static final int COLUMN_PRECIO1 = 21;

	/** 
	 * Index of column Clase
	 */
   protected static final int COLUMN_CLASE = 22;

	/** 
	 * Index of column Cubicaje
	 */
   protected static final int COLUMN_CUBICAJE = 23;

	/** 
	 * Index of column Peso
	 */
   protected static final int COLUMN_PESO = 24;

	/** 
	 * Index of column Equivalencia
	 */
   protected static final int COLUMN_EQUIVALENCIA = 25;

	/** 
	 * Number of columns
	 */
   protected static final int NUMBER_OF_COLUMNS = 25;

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria ''.
	 */
   public VwArticulos[] findAll() throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT, null );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Clave = :clave'.
	 */
   public VwArticulos[] findWhereClaveEquals(String clave) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Clave = ? ORDER BY Clave", new Object[] { clave } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Nombre = :nombre'.
	 */
   public VwArticulos[] findWhereNombreEquals(String nombre) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Nombre LIKE ? ORDER BY Nombre", new Object[] { nombre } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'UnidadPrimaria = :unidadPrimaria'.
	 */
   public VwArticulos[] findWhereUnidadPrimariaEquals(String unidadPrimaria) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE UnidadPrimaria = ? ORDER BY UnidadPrimaria", new Object[] { unidadPrimaria } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Precio2 = :precio2'.
	 */
   public VwArticulos[] findWherePrecio2Equals(double precio2) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Precio2 = ? ORDER BY Precio2", new Object[] {  new Double(precio2) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Precio3 = :precio3'.
	 */
   public VwArticulos[] findWherePrecio3Equals(double precio3) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Precio3 = ? ORDER BY Precio3", new Object[] {  new Double(precio3) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Precio4 = :precio4'.
	 */
   public VwArticulos[] findWherePrecio4Equals(double precio4) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Precio4 = ? ORDER BY Precio4", new Object[] {  new Double(precio4) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Precio5 = :precio5'.
	 */
   public VwArticulos[] findWherePrecio5Equals(double precio5) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Precio5 = ? ORDER BY Precio5", new Object[] {  new Double(precio5) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'TipoImpuesto = :tipoImpuesto'.
	 */
   public VwArticulos[] findWhereTipoImpuestoEquals(String tipoImpuesto) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE TipoImpuesto = ? ORDER BY TipoImpuesto", new Object[] { tipoImpuesto } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Grupo = :grupo'.
	 */
   public VwArticulos[] findWhereGrupoEquals(String grupo) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Grupo = ? ORDER BY Grupo", new Object[] { grupo } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Tipo = :tipo'.
	 */
   public VwArticulos[] findWhereTipoEquals(String tipo) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Tipo = ? ORDER BY Tipo", new Object[] { tipo } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Status = :status'.
	 */
   public VwArticulos[] findWhereStatusEquals(String status) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Status = ? ORDER BY Status", new Object[] { status } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Ubicacion = :ubicacion'.
	 */
   public VwArticulos[] findWhereUbicacionEquals(String ubicacion) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Ubicacion = ? ORDER BY Ubicacion", new Object[] { ubicacion } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Moneda = :moneda'.
	 */
   public VwArticulos[] findWhereMonedaEquals(String moneda) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Moneda = ? ORDER BY Moneda", new Object[] { moneda } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'TiempoSurtido = :tiempoSurtido'.
	 */
   public VwArticulos[] findWhereTiempoSurtidoEquals(double tiempoSurtido) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE TiempoSurtido = ? ORDER BY TiempoSurtido", new Object[] {  new Double(tiempoSurtido) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Pedido = :pedido'.
	 */
   public VwArticulos[] findWherePedidoEquals(double pedido) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Pedido = ? ORDER BY Pedido", new Object[] {  new Double(pedido) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'CostoPromedio = :costoPromedio'.
	 */
   public VwArticulos[] findWhereCostoPromedioEquals(double costoPromedio) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE CostoPromedio = ? ORDER BY CostoPromedio", new Object[] {  new Double(costoPromedio) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'UltimoCosto = :ultimoCosto'.
	 */
   public VwArticulos[] findWhereUltimoCostoEquals(double ultimoCosto) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE UltimoCosto = ? ORDER BY UltimoCosto", new Object[] {  new Double(ultimoCosto) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'CostoReposicion = :costoReposicion'.
	 */
   public VwArticulos[] findWhereCostoReposicionEquals(double costoReposicion) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE CostoReposicion = ? ORDER BY CostoReposicion", new Object[] {  new Double(costoReposicion) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'ExistenciaTotal = :existenciaTotal'.
	 */
   public VwArticulos[] findWhereExistenciaTotalEquals(double existenciaTotal) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE ExistenciaTotal = ? ORDER BY ExistenciaTotal", new Object[] {  new Double(existenciaTotal) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Activo = :activo'.
	 */
   public VwArticulos[] findWhereActivoEquals(String activo) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Activo = ? ORDER BY Activo", new Object[] { activo } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Precio1 = :precio1'.
	 */
   public VwArticulos[] findWherePrecio1Equals(double precio1) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Precio1 = ? ORDER BY Precio1", new Object[] {  new Double(precio1) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Clase = :clase'.
	 */
   public VwArticulos[] findWhereClaseEquals(String clase) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Clase = ? ORDER BY Clase", new Object[] { clase } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Cubicaje = :cubicaje'.
	 */
   public VwArticulos[] findWhereCubicajeEquals(double cubicaje) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Cubicaje = ? ORDER BY Cubicaje", new Object[] {  new Double(cubicaje) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Peso = :peso'.
	 */
   public VwArticulos[] findWherePesoEquals(double peso) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Peso = ? ORDER BY Peso", new Object[] {  new Double(peso) } );
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the criteria 'Equivalencia = :equivalencia'.
	 */
   public VwArticulos[] findWhereEquivalenciaEquals(double equivalencia) throws VwArticulosDaoException
   {
      return findByDynamicSelect( SQL_SELECT + " WHERE Equivalencia = ? ORDER BY Equivalencia", new Object[] {  new Double(equivalencia) } );
   }

	/**
	 * Method 'VwArticulosDaoImpl'
	 * 
	 */
   public VwArticulosDaoImpl()
   {
   }

	/**
	 * Method 'VwArticulosDaoImpl'
	 * 
	 * @param userConn
	 */
   public VwArticulosDaoImpl(final Connection userConn)
   {
      this.userConn = userConn;
   }

	/** 
	 * Sets the value of maxRows
	 */
   public void setMaxRows(int maxRows)
   {
      this.maxRows = maxRows;
   }

	/** 
	 * Gets the value of maxRows
	 */
   public int getMaxRows()
   {
      return maxRows;
   }

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
   public String getTableName()
   {
      return "Inven_E..vwArticulos";
   }

	/** 
	 * Fetches a single row from the result set
	 */
   protected VwArticulos fetchSingleResult(ResultSet rs) throws SQLException
   {
      if (rs.next()) {
         VwArticulos dto = new VwArticulos();
         populateDto( dto, rs);
         return dto;
      } else {
         return null;
      }
   	
   }

	/** 
	 * Fetches multiple rows from the result set
	 */
   protected VwArticulos[] fetchMultiResults(ResultSet rs) throws SQLException
   {
      Collection resultList = new ArrayList();
      while (rs.next()) {
         VwArticulos dto = new VwArticulos();
         populateDto( dto, rs);
         resultList.add( dto );
      }
   	
      VwArticulos ret[] = new VwArticulos[ resultList.size() ];
      resultList.toArray( ret );
      return ret;
   }

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
   protected void populateDto(VwArticulos dto, ResultSet rs) throws SQLException
   {
      dto.setClave( rs.getString( COLUMN_CLAVE ) );
      dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
      dto.setUnidadPrimaria( rs.getString( COLUMN_UNIDAD_PRIMARIA ) );
      dto.setPrecio2( rs.getDouble( COLUMN_PRECIO2 ) );
      if (rs.wasNull()) {
         dto.setPrecio2Null( true );
      }
   	
      dto.setPrecio3( rs.getDouble( COLUMN_PRECIO3 ) );
      if (rs.wasNull()) {
         dto.setPrecio3Null( true );
      }
   	
      dto.setPrecio4( rs.getDouble( COLUMN_PRECIO4 ) );
      if (rs.wasNull()) {
         dto.setPrecio4Null( true );
      }
   	
      dto.setPrecio5( rs.getDouble( COLUMN_PRECIO5 ) );
      if (rs.wasNull()) {
         dto.setPrecio5Null( true );
      }
   	
      dto.setTipoImpuesto( rs.getString( COLUMN_TIPO_IMPUESTO ) );
      dto.setGrupo( rs.getString( COLUMN_GRUPO ) );
      dto.setTipo( rs.getString( COLUMN_TIPO ) );
      dto.setStatus( rs.getString( COLUMN_STATUS ) );
      dto.setUbicacion( rs.getString( COLUMN_UBICACION ) );
      dto.setMoneda( rs.getString( COLUMN_MONEDA ) );
      dto.setTiempoSurtido( rs.getDouble( COLUMN_TIEMPO_SURTIDO ) );
      if (rs.wasNull()) {
         dto.setTiempoSurtidoNull( true );
      }
   	
      dto.setPedido( rs.getDouble( COLUMN_PEDIDO ) );
      if (rs.wasNull()) {
         dto.setPedidoNull( true );
      }
   	
      dto.setCostoPromedio( rs.getDouble( COLUMN_COSTO_PROMEDIO ) );
      if (rs.wasNull()) {
         dto.setCostoPromedioNull( true );
      }
   	
      dto.setUltimoCosto( rs.getDouble( COLUMN_ULTIMO_COSTO ) );
      if (rs.wasNull()) {
         dto.setUltimoCostoNull( true );
      }
   	
      dto.setCostoReposicion( rs.getDouble( COLUMN_COSTO_REPOSICION ) );
      if (rs.wasNull()) {
         dto.setCostoReposicionNull( true );
      }
   	
      dto.setExistenciaTotal( rs.getDouble( COLUMN_EXISTENCIA_TOTAL ) );
      if (rs.wasNull()) {
         dto.setExistenciaTotalNull( true );
      }
   	
      dto.setActivo( rs.getString( COLUMN_ACTIVO ) );
      dto.setPrecio1( rs.getDouble( COLUMN_PRECIO1 ) );
      if (rs.wasNull()) {
         dto.setPrecio1Null( true );
      }
   	
      dto.setClase( rs.getString( COLUMN_CLASE ) );
      dto.setCubicaje( rs.getDouble( COLUMN_CUBICAJE ) );
      if (rs.wasNull()) {
         dto.setCubicajeNull( true );
      }
   	
      dto.setPeso( rs.getDouble( COLUMN_PESO ) );
      if (rs.wasNull()) {
         dto.setPesoNull( true );
      }
   	
      dto.setEquivalencia( rs.getDouble( COLUMN_EQUIVALENCIA ) );
      if (rs.wasNull()) {
         dto.setEquivalenciaNull( true );
      }
   	
   }

	/** 
	 * Resets the modified attributes in the DTO
	 */
   protected void reset(VwArticulos dto)
   {
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the specified arbitrary SQL statement
	 */
   public VwArticulos[] findByDynamicSelect(String sql, Object[] sqlParams) throws VwArticulosDaoException
   {
   	// declare variables
      final boolean isConnSupplied = (userConn != null);
      Connection conn = null;
      PreparedStatement stmt = null;
      ResultSet rs = null;
   	
      try {
      	// get the user-specified connection or get a connection from the ResourceManager
         conn = isConnSupplied ? userConn : ResourceManager.getConnection();
      
      	// construct the SQL statement
         final String SQL = sql;
      
      
         System.out.println( "Executing " + SQL );
      	// prepare statement
         stmt = conn.prepareStatement( SQL );
         stmt.setMaxRows( maxRows );
      
      	// bind parameters
         for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
            stmt.setObject( i+1, sqlParams[i] );
         }
      
      
         rs = stmt.executeQuery();
      
      	// fetch the results
         return fetchMultiResults(rs);
      }
      catch (Exception _e) {
         _e.printStackTrace();
         throw new VwArticulosDaoException( "Exception: " + _e.getMessage(), _e );
      }
      finally {
         ResourceManager.close(rs);
         ResourceManager.close(stmt);
         if (!isConnSupplied) {
            ResourceManager.close(conn);
         }
      
      }
   	
   }

	/** 
	 * Returns all rows from the vwArticulos table that match the specified arbitrary SQL statement
	 */
   public VwArticulos[] findByDynamicWhere(String sql, Object[] sqlParams) throws VwArticulosDaoException
   {
   	// declare variables
      final boolean isConnSupplied = (userConn != null);
      Connection conn = null;
      PreparedStatement stmt = null;
      ResultSet rs = null;
   	
      try {
      	// get the user-specified connection or get a connection from the ResourceManager
         conn = isConnSupplied ? userConn : ResourceManager.getConnection();
      
      	// construct the SQL statement
         final String SQL = SQL_SELECT + " WHERE " + sql;
      
      
         System.out.println( "Executing " + SQL );
      	// prepare statement
         stmt = conn.prepareStatement( SQL );
         stmt.setMaxRows( maxRows );
      
      	// bind parameters
         for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
            stmt.setObject( i+1, sqlParams[i] );
         }
      
      
         rs = stmt.executeQuery();
      
      	// fetch the results
         return fetchMultiResults(rs);
      }
      catch (Exception _e) {
         _e.printStackTrace();
         throw new VwArticulosDaoException( "Exception: " + _e.getMessage(), _e );
      }
      finally {
         ResourceManager.close(rs);
         ResourceManager.close(stmt);
         if (!isConnSupplied) {
            ResourceManager.close(conn);
         }
      
      }
   	
   }

}
